#macro( smallType $type)
#if($type == "Byte")int#elseif( $type == "Boolean" )int#elseif( $type == "Short" )int#elseif( $type == "Integer" )int#elseif( $type == "Long" )Number#elseif( $type == "Float" )Number#elseif( $type == "Double" )Number#else$type#end
#end
#macro( bigType $type)
#if( $type == "Integer" )Int#elseif( $type == "Boolean" )Byte#elseif( $type == "String" )StringUShort#else$type#end
#end
#macro( upperFirstChar $type)$type.substring(0,1).toUpperCase()$type.substring(1)#end
#macro( readMsg $field $lastFieldObjectName)
#if(${field.list})
local ${field.smallName}_${lastFieldObjectName}
local ${lastFieldObjectName}_${field.smallName} = {}
local ${lastFieldObjectName}_${field.smallName}Size = data:readShort()
${lastFieldObjectName}.${field.smallName} = ${lastFieldObjectName}_${field.smallName}
for ${field.smallName}_${lastFieldObjectName}=1, ${lastFieldObjectName}_${field.smallName}Size do
	#if(${field.isNewType})
	${lastFieldObjectName}_${field.smallName}[${field.smallName}_${lastFieldObjectName}] = requireNewProtoData("${field.type}")
	local ${lastFieldObjectName}_${field.smallName}_obj = ${lastFieldObjectName}_${field.smallName}[${field.smallName}_${lastFieldObjectName}]
	#set($fieldObjectName="${lastFieldObjectName}_${field.smallName}_obj")
	#foreach( $subfield in $field.subFields )
	#if($subfield.type=="Long")
	${fieldObjectName}.${subfield.smallName} = data:readLong()
	#else
	#readMsg($subfield ${fieldObjectName})
	#end
	#end
	#else
	${lastFieldObjectName}.${field.smallName}[${field.smallName}_${lastFieldObjectName}] = data:read#bigType(${field.type})()
	#end
end
#elseif(${field.isNewType})
local ${field.smallName} = requireNewProtoData("${field.type}")
${lastFieldObjectName}.${field.smallName} = ${field.smallName}
#set($fieldObject="${field.smallName}")
#foreach( $subfield in $field.subFields )
#if($subfield.type=="Long")
${fieldObject}.${subfield.smallName} = data:readLong()
#else
#readMsg($subfield ${fieldObject})
#end
#end
#else
${lastFieldObjectName}.${field.smallName} = data:read#bigType(${field.type})()
#end
#end
#if($constants.size()>0)
	--[[
	 -- 常量定义
#foreach( $constant in $constants )
	 --	【$constant.name】$constant.desc
#end	
	 ]]
#end
	local GC${module}Message = class("GC${module}Message")
		function GC${module}Message:register()
				-- register handler method
#foreach( $msg in $msgs )
				register(MessageType.${msg.type}, handler(self, self.${msg.type}))
#end
				-- register handler
				GlobalHandlers:register("#upperFirstChar($module)Handler", requireNewHandler("#upperFirstChar($module)Handler"))
		end
#foreach( $msg in $msgs )
 
  		--[[
		 -- $msg.comment
#foreach( $field in $msg.fields )
		 -- @param $field.smallName $field.comment
#end
		 ]]
		function GC${module}Message:${msg.type}(data)
#if($msg.hasListField)
			local i
			local size
#end
#foreach( $field in $msg.fields )
#if ($field.list) 
			local ${field.smallName} = {}
			size = data:readShort()
			for i=1, size do
				#if($field.type=="Long")
				${field.smallName}[i] = data:readLong()
				#elseif($field.isNewType)
				${field.smallName}[i] = requireNewProtoData("${field.type}")
				local ${field.smallName}_obj = ${field.smallName}[i]
				#set($fieldObjectNameA="${field.smallName}_obj")
				#foreach( $subfield in $field.subFields )
				#set($index=$velocityCount - 1)
				#if($subfield.type=="Long")
									${field.smallName}[i].${subfield.smallName} = data:readLong() --$subfield.comment
				#else
									#readMsg($subfield ${fieldObjectNameA})
				#end
				#end
				#else
				${field.smallName}[i] = data:read#bigType($field.type)()
				#end
			end
#elseif($field.isNewType)
			local ${field.smallName} = requireNewProtoData("${field.type}")
			#set($fieldObjectA="${field.smallName}")
#foreach( $subfield in $field.subFields )
#if($subfield.type=="Long")
			${field.smallName}.${subfield.smallName} = data:readLong()
#else
			#readMsg($subfield ${fieldObjectA})	
#end
#end			
#elseif($field.type=="Long")
			local ${field.smallName} = data:readLong()
#else
			local ${field.smallName} = data:read#bigType($field.type)()	
#end
#end
#if($msg.fields.size()>0||$msg.subMsgs.size()==0)
			GlobalHandlers:getHandler("#upperFirstChar($module)Handler"):${msg.type}(#foreach( $field in $msg.fields )${field.smallName}#if($velocityCount != $msg.fields.size()),#end#end)
#end
#foreach( $subMsg in $msg.subMsgs )
			local i
			local size
			size = data:readShort()
			for i=1, size do
				${subMsg.type}(data)
			end
#end
		end
#end
	return GC${module}Message
