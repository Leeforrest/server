package com.hifun.soul.gameserver.common.log;

#foreach($logConfig in $logConfigs)
import com.hifun.soul.logserver.model.${logConfig.getLogFileName()};
#end
import com.hifun.soul.core.log.UdpLoggerClient;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.hifun.soul.common.LogReasons;
import com.hifun.soul.gameserver.human.Human;
import org.springframework.beans.factory.annotation.Autowired;
import com.hifun.soul.core.time.SystemTimeService;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

/**
 * This is an auto generated source,please don't modify it.
 */
@Scope("singleton")
@Component
public class LogService {
	private static final Logger logger = LoggerFactory.getLogger(LogService.class);
	/** 日志客户端 */
	private final UdpLoggerClient udpLoggerClient = UdpLoggerClient.getInstance();
	/**  游戏区ID */
	private int regionID;
	/** 游戏服务器ID */
	private int serverID;
	/** 游戏时间服务管理 */
	@Autowired
	private SystemTimeService timeService;
	
	private boolean isLogServerSwitch = true;
	
	public LogService() {
	}
	
	public LogService(boolean isLogServerSwitch) {
		this.isLogServerSwitch = isLogServerSwitch;
	}
	
	public void setIsLogServerSwitch(boolean isLogServerSwitch) {
		this.isLogServerSwitch = isLogServerSwitch;
	}
	/**
	 * 初始化
	 * 
	 * @param logServerIp
	 *            日志服务器IP
	 * @param logServerPort
	 *            日志服务器端口
	 * @param regionID
	 *            游戏区ID
	 * @param serverID
	 *            游戏服务器ID
	 */
	public void init(String logServerIp, int logServerPort, int regionID, int serverID) {
		if(isLogServerSwitch){
			udpLoggerClient.initialize(logServerIp, logServerPort);
			udpLoggerClient.setRegionId(regionID);
			udpLoggerClient.setServerId(serverID);
	
			this.regionID = regionID;
			this.serverID = serverID;
			
			if (logger.isInfoEnabled()) {
				logger.info("Connnect to Log server : " + logServerIp + " : " + logServerPort);
			}
		}
	}

#foreach($logConfig in $logConfigs)
	#set($fields = ${logConfig.getFields()})
	/**
	 * 发送${logConfig.logInfo}
#foreach($field in $sharedFields)
#if(($field.name != "logType") && ($field.name != "regionId") && ($field.name != "serverId"))
	 * @param $field.name $field.fieldInfo
#end 
#end
#foreach($field in $fields)
	 * @param ${field.name} ${field.fieldInfo}
#end
	 */
	public void send${logConfig.getLogFileName()}(Human human,
#foreach($field in $sharedFields)
#if($field.name=="reason")
				LogReasons.${logConfig.getLogFileName()}Reason $field.name#if($velocityCount!=$sharedFields.size()),#end
#elseif(($field.name == "param"))
				$field.type $field.name#if($velocityCount!=$sharedFields.size()),#end
#end
#end
#foreach($field in $fields)
			,$field.type $field.name
#end
		) {
		if(isLogServerSwitch){
		udpLoggerClient.sendMessage(new ${logConfig.getLogFileName()}(
#foreach($field in $sharedFields)
#if($field.name == "logType")
#elseif($field.name=="param")
				$field.name#if($velocityCount!=$sharedFields.size()),#end
#elseif($field.name=="reason")
				${field.name}.reason#if($velocityCount!=$sharedFields.size()),#end
#elseif($field.name=="regionId")
				this.regionID#if($velocityCount!=$sharedFields.size()),#end
#elseif($field.name=="serverId")
				this.serverID#if($velocityCount!=$sharedFields.size()),#end
#elseif($field.name=="accountId")
				human.getPlayer().getPassportId()#if($velocityCount!=$sharedFields.size()),#end
#elseif($field.name=="accountName")
				human.getPlayer().getAccount()#if($velocityCount!=$sharedFields.size()),#end
#elseif($field.name=="charId")
				human.getHumanGuid()#if($velocityCount!=$sharedFields.size()),#end
#elseif($field.name=="charName")
				human.getName()#if($velocityCount!=$sharedFields.size()),#end
#elseif($field.name=="level")
				human.getLevel()#if($velocityCount!=$sharedFields.size()),#end
#elseif($field.name=="allianceId")
				human.getOccupation().getIndex()#if($velocityCount!=$sharedFields.size()),#end
#elseif($field.name=="vipLevel")
				human.getVipLevel()#if($velocityCount!=$sharedFields.size()),#end
#elseif($field.name=="logTime")
				timeService.now()#if($velocityCount!=$sharedFields.size()),#end				
#end
			
#end
#foreach($field in $fields)
			,$field.name
#end
		));
		}
	}
#end

}